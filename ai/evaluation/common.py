import chess

# Basic piece-square tables to give positional scores.
# The idea is that certain squares are better or worse for certain pieces.
PIECE_SQUARE_TABLES = {
    chess.PAWN: [
        0,   0,   0,   0,   0,   0,   0,   0,
        5,   5,   5,  -5,  -5,   0,   5,   5,
        1,   1,   2,   3,   3,   2,   1,   1,
        0.5, 0.5, 1,   2.5, 2.5, 1,   0.5, 0.5,
        0,   0,   0,   2,   2,   0,   0,   0,
        0.5,-0.5,-1,   0,   0,  -1, -0.5, 0.5,
        0.5, 1,   1,  -2,  -2,   1,   1,  0.5,
        0,   0,   0,   0,   0,   0,   0,   0
    ],
    chess.KNIGHT: [
        -5, -4, -3, -3, -3, -3, -4, -5,
        -4, -2,  0,  0,  0,  0, -2, -4,
        -3,  0,  1,  2,  2,  1,  0, -3,
        -3,  0,  2,  3,  3,  2,  0, -3,
        -3,  0,  2,  3,  3,  2,  0, -3,
        -3,  0,  1,  2,  2,  1,  0, -3,
        -4, -2,  0,  0,  0,  0, -2, -4,
        -5, -4, -3, -3, -3, -3, -4, -5
    ],
    chess.BISHOP: [
        -2, -1, -1, -1, -1, -1, -1, -2,
        -1,  0,  0,  0,  0,  0,  0, -1,
        -1,  0,  1,  2,  2,  1,  0, -1,
        -1,  1,  2,  2.5,2.5,2,  1, -1,
        -1,  0,  2,  2.5,2.5,2,  0, -1,
        -1,  1,  1,  2,  2,  1,  1, -1,
        -1,  0,  0,  0,  0,  0,  0, -1,
        -2, -1, -1, -1, -1, -1, -1, -2
    ],
    chess.ROOK: [
         0,   0,  0,  0,  0,   0,   0,  0,
         0.5, 1,  1,  1,  1,   1,   1, 0.5,
        -0.5, 0,  0,  0,  0,   0,   0,-0.5,
        -0.5, 0,  0,  0,  0,   0,   0,-0.5,
        -0.5, 0,  0,  0,  0,   0,   0,-0.5,
        -0.5, 0,  0,  0,  0,   0,   0,-0.5,
        -0.5, 0,  0,  0,  0,   0,   0,-0.5,
         0,   0,  0,  0.5,0.5, 0,   0,  0
    ],
    chess.QUEEN: [
        -2, -1, -1, -0.5,-0.5,-1, -1, -2,
        -1,  0,  0,   0,   0,  0,  0, -1,
        -1,  0,  1,   1,   1,  1,  0, -1,
        -0.5,0,  1,   1,   1,  1,  0,-0.5,
         0,   0,  1,   1,   1,  1,  0,-0.5,
        -1,  1,  1,   1,   1,  1,  0, -1,
        -1,  0,  1,   0,   0,  0,  0, -1,
        -2, -1, -1, -0.5,-0.5,-1, -1, -2
    ],
    chess.KING: [
        -3, -4, -4, -5, -5, -4, -4, -3,
        -3, -4, -4, -5, -5, -4, -4, -3,
        -3, -4, -4, -5, -5, -4, -4, -3,
        -3, -4, -4, -5, -5, -4, -4, -3,
        -2, -3, -3, -4, -4, -3, -3, -2,
        -1, -2, -2, -2, -2, -2, -2, -1,
         2,  2,  0,   0,  0,  0,  2,  2,
         2,  3,  1,   0,  0,  1,  3,  2
    ],
    'endgame_king': [
        -5, -3, -1,  0,  0, -1, -3, -5,
        -3, -1,  1,  2,  2,  1, -1, -3,
        -1,  1,  3,  4,  4,  3,  1, -1,
         0,  2,  4,  5,  5,  4,  2,  0,
         0,  2,  4,  5,  5,  4,  2,  0,
        -1,  1,  3,  4,  4,  3,  1, -1,
        -3, -1,  1,  2,  2,  1, -1, -3,
        -5, -3, -1,  0,  0, -1, -3, -5
    ]
}

# Basic piece values used for quick material counts
PIECE_VALUES = {
    chess.PAWN: 1,
    chess.KNIGHT: 3,
    chess.BISHOP: 3,
    chess.ROOK: 5,
    chess.QUEEN: 9,
    chess.KING: 0
}

def is_endgame(board):
    """
    Check if we're in the endgame by summing up material (excluding kings).
    If it's low enough, we consider it endgame.
    """
    total_material = sum(PIECE_VALUES[piece.piece_type] for piece in board.piece_map().values() if piece.piece_type != chess.KING)
    return total_material <= 1300